async function searchPapers() {
    const topic = document.getElementById('searchInput').value;
    const resultsDiv = document.getElementById('results');
    resultsDiv.innerHTML = '<div class="flex justify-center"><div class="animate-spin rounded-full h-12 w-12 border-b-2 border-violet-700"></div></div>';

    try {
        const response = await fetch('/api/search?topic=' + encodeURIComponent(topic));
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        if (data.papers.length === 0) {
            resultsDiv.innerHTML = '<div class="text-center p-8 bg-white rounded-lg shadow-md"><p class="text-gray-600 text-lg">No papers found. Try another topic! üîç</p></div>';
            return;
        }
        
        // Papers
        let resultsHTML = data.papers.map(paper => `
            <div class="bg-white rounded-lg shadow-lg hover:shadow-xl transition-all p-6">
                <h2 class="text-2xl font-bold text-violet-700 mb-2">${paper.title}</h2>
                <p class="text-gray-600 mb-2">üë• Authors: ${paper.authors.join(', ')}</p>
                <p class="text-gray-800 mb-4">${paper.summary}</p>
                <div class="flex flex-wrap gap-2 mb-4">
                    ${paper.keywords.map(keyword => `
                        <span class="px-3 py-1 bg-violet-100 text-violet-700 rounded-full text-sm">
                            ${keyword}
                        </span>
                    `).join('')}
                </div>
                <div class="flex flex-wrap gap-4 items-center justify-between">
                    <div class="flex gap-2">
                        <button onclick="readWithTTS('${paper.summary.replace(/'/g, "\\'")}')" 
                                class="px-4 py-2 bg-violet-100 text-violet-700 rounded-lg hover:bg-violet-200 transition-all">
                            üéß Read with TTS
                        </button>
                        <a href="${paper.pdf_link}" target="_blank" 
                           class="px-4 py-2 bg-violet-600 text-white rounded-lg hover:bg-violet-700 transition-all">
                            üìÑ PDF Article
                        </a>
                        <button onclick="startAIquest('${paper.pdf_link}')"
                                class="px-4 py-2 bg-violet-100 text-violet-700 rounded-lg hover:bg-violet-200 transition-all">
                            ü§ñ AI Quest
                        </button>
                    </div>
                    <div class="text-sm text-gray-500">
                        <span>üìÖ ${new Date(paper.published).toLocaleDateString()}</span>
                        <span class="ml-4">‚è±Ô∏è ${paper.reading_time}</span>
                    </div>
                </div>
            </div>
        `).join('');

        resultsDiv.innerHTML = resultsHTML;
    } catch (error) {
        resultsDiv.innerHTML = '<div class="text-center p-8 bg-white rounded-lg shadow-md"><p class="text-red-600 text-lg">Error fetching papers. Please try again! ‚ö†Ô∏è</p></div>';
    }
}

function setExampleTopic(topic) {
    document.getElementById('searchInput').value = topic;
    searchPapers();
}

let topicSuggestions = []; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º
let debounceTimer; // –•—Ä–∞–Ω–∏—Ç ID —Ç–∞–π–º–µ—Ä–∞

async function loadTopics() {
    if (topicSuggestions.length > 0) return; // –ï—Å–ª–∏ —Ç–µ–º—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º

    try {
        let response = await fetch("/static/data/title.json"); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ JSON
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö");

        let data = await response.json();
        //  console.log("Raw JSON data:", data); // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON

        if (data.categories && Array.isArray(data.categories)) {
            topicSuggestions = data.categories.map(item => item.title || '');
        } else {
            topicSuggestions = [];
        }

        //console.log("–¢–µ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", topicSuggestions); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º:", error);
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = loadTopics;

document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const suggestionsBox = document.getElementById('suggestions');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å –¥–µ–±–∞—É–Ω—Å–æ–º (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ø–∞–º–∞ –≤—ã–∑–æ–≤–æ–≤)
    searchInput.addEventListener('input', function () {
        clearTimeout(debounceTimer); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä

        debounceTimer = setTimeout(() => {
            filterSuggestions(); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ 300 –º—Å
        }, 300);
    });

    function filterSuggestions() {
        const searchText = searchInput.value.toLowerCase();
        if (!searchText) {
            suggestionsBox.style.display = 'none';
            return;
        }

        //console.log("–§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ:", searchText);

        const filteredData = topicSuggestions
            .filter(item => typeof item === 'string' || typeof item === 'number') // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏/—á–∏—Å–ª–∞
            .map(item => String(item)) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å—ë –≤ —Å—Ç—Ä–æ–∫–∏
            .filter(item => item.toLowerCase().includes(searchText)); // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è

        showSuggestions(filteredData);
    }

    function showSuggestions(data) {
        suggestionsBox.innerHTML = '';
        if (!data || data.length === 0) {
            suggestionsBox.style.display = 'none';
            return;
        }

        data.forEach((item) => {
            const div = document.createElement('div');
            div.classList.add('suggestion');
            div.textContent = item;
            div.addEventListener('click', () => {
                searchInput.value = item;
                suggestionsBox.style.display = 'none';
                searchPapers(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
            });
            suggestionsBox.appendChild(div);
        });

        suggestionsBox.style.display = 'block';
    }

    // –ü—Ä—è—á–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
    document.addEventListener('click', (event) => {
        if (!searchInput.contains(event.target) && !suggestionsBox.contains(event.target)) {
            suggestionsBox.style.display = 'none';
        }
    });
});
function showSuggestions(data) {
    suggestionsBox.innerHTML = '';
    if (!data || data.length === 0) {
        suggestionsBox.style.display = 'none';
        return;
    }

    data.forEach(item => {
        const div = document.createElement('div');
        div.classList.add('suggestion');
        div.textContent = item;
        div.addEventListener('click', () => {
            searchInput.value = item;
            suggestionsBox.style.display = 'none';
        });

        suggestionsBox.appendChild(div);
    });

    suggestionsBox.style.display = 'block';
}
